https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) {
            return res;
        }
        boolean isLeftOrder = true;
        Queue<TreeNode> nodes = new LinkedList<>();
        nodes.add(root);
        while(!nodes.isEmpty()) {
            int size = nodes.size();
            Deque<Integer> levelNode = new LinkedList<>();
            for(int i = 0  ;i < size ; i ++) {
                TreeNode node = nodes.poll();
                if(!isLeftOrder) {
                    levelNode.offerFirst(node.val);
                } else {
                    levelNode.offerLast(node.val);
                }
                if(node.left != null) {
                    nodes.add(node.left);
                }
                if(node.right != null) {
                    nodes.add(node.right);
                }
            }
            isLeftOrder = !isLeftOrder;
            res.add(new LinkedList<>(levelNode));
        }
        return res;
    }
}