https://leetcode-cn.com/problems/combination-sum/



class Solution {
    List<List<Integer>> res = new LinkedList<>();

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        Deque<Integer> list = new LinkedList<>();
        myCombinationSum(candidates, 0, 0, list, target);
        return res;
    }

    private void myCombinationSum(int[] candidates, int index, int curSum, Deque<Integer> list, int target) {
        if(curSum == target) {
            res.add(new ArrayList<>(list));
            return;
        }
        if(index == candidates.length) {
            return;
        }
        int maxSum = (target - curSum)/ candidates[index];
        if(maxSum < 1) {
            return;
        }
        for(int i = 0; i <= maxSum; i ++) {
            for(int j = 0 ; j< i; j ++) {
                list.addLast(candidates[index]);
            }
            myCombinationSum(candidates, index+1, curSum + candidates[index] * i, list, target);
            for(int j = 0 ; j< i; j ++) {
                list.removeLast();
            }
        }
    }
}