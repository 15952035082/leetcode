https://leetcode-cn.com/problems/merge-k-sorted-lists/



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return merge(lists, 0, lists.length - 1);
    }

    private ListNode merge(ListNode[] lists, int l, int r) {
        if(l == r) {
            return lists[l];
        }
        if(l > r) {
            return null;
        }
        int mid = (l+r)/2;
        return mergeTwoList(merge(lists, l, mid), merge(lists, mid + 1, r));
    }

    private ListNode mergeTwoList(ListNode a, ListNode b) {
        ListNode head = new ListNode(0);
        ListNode tail = head;
        ListNode aPtr = a, bPtr = b;
        while(aPtr != null && bPtr!= null) {
            if(aPtr.val < bPtr .val) {
                tail.next = aPtr;
                aPtr = aPtr.next;
            } else {
                tail.next = bPtr;
                bPtr = bPtr.next;
            }
            tail = tail.next;
        }
        tail.next = aPtr == null ? bPtr : aPtr;
        return head.next;
    }
}




Solution 2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    class TempNode implements Comparable<TempNode>{

        int val;
        ListNode node;

        TempNode(int val, ListNode node) {
            this.val = val;
            this.node = node;
        }


        @Override
        public int compareTo(TempNode o) {
            return val - o.val;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<TempNode> que = new PriorityQueue<TempNode>();
        ListNode head = new ListNode(0);
        ListNode tail = head;
        for(ListNode node : lists) {
            if(node != null) {
                que.add(new TempNode(node.val, node));
            }
        }
        while(!que.isEmpty()) {
            TempNode curHead = que.poll();
            tail.next = curHead.node;
            tail = tail.next;
            if(curHead.node.next != null) {
                que.add(new TempNode(curHead.node.next.val, curHead.node.next));
            }
        }
        return head.next;
    }
}



